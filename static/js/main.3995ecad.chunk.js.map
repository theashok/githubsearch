{"version":3,"sources":["components/GithubSearch.js","components/githubCredentials.js","components/GithubProfileCard.js","components/GithubProfileDetails.js","components/GithubProfile.js","components/GithubRepos.js","components/GithubSearchApp.js","App.js","serviceWorker.js","index.js"],"names":["GithubSearch","props","updateInput","event","setState","username","target","value","submitSearch","preventDefault","pushUserName","state","Fragment","className","onSubmit","this","onChange","size","type","placeholder","React","Component","clientSecret","GithubProfileCard","src","profile","avatar_url","alt","name","bio","href","html_url","GithubProfileDetails","followers","public_repos","public_gists","following","location","email","company","blog","created_at","GithubProfile","Object","keys","length","GithubRepos","repos","map","repo","stargazers_count","watchers_count","GithubSearchApp","pullUserName","searchUserProfile","searchUserRepos","dataURL","Axios","get","then","response","data","catch","err","errorMessage","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.3995ecad.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass GithubSearch extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username : ''\r\n        }\r\n    }\r\n\r\n    updateInput = (event) => {\r\n        this.setState({\r\n            username : event.target.value\r\n        });\r\n    };\r\n\r\n    submitSearch = (event) => {\r\n        event.preventDefault();\r\n        this.props.pushUserName(this.state.username);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n               {/* <pre>{JSON.stringify(this.state)}</pre>*/}\r\n                <div className=\"card mt-3\">\r\n                    \r\n                    <div className=\"card-body\">\r\n                        <form className=\"form-inline\" onSubmit={this.submitSearch}>\r\n                            <div className=\"form-group\">\r\n                                <input\r\n                                    value={this.state.username}\r\n                                    onChange={this.updateInput}\r\n                                    size=\"40\" type=\"search\" className=\"form-control\" placeholder=\"Github User\"/>\r\n                            </div>\r\n                            <div>\r\n                                <input type=\"submit\" value=\"search\" className=\"btn btn-secondary btn-sm\"/>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default GithubSearch;\r\n","export const clientID = '49dabbba96870e617df3';\r\nexport const clientSecret = '48fde9e1c7a7657b37dd799e3fec7d49a560e6be';\r\n","import React from \"react\";\r\n\r\nclass GithubProfileCard extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"card\">\r\n                    <img src={this.props.profile.avatar_url} alt=\"\" className=\"img-fluid\"/>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"h4\">{this.props.profile.name}</p>\r\n                        <p>{this.props.profile.bio}</p>\r\n                        <a href={this.props.profile.html_url} className=\"btn btn-success btn-sm\" target=\"_blank\">Profile</a>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default GithubProfileCard;\r\n","import React from \"react\";\r\n\r\nclass GithubProfileDetails extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <span className=\"badge badge-success mx-1\">Followers : {this.props.profile?.followers}</span>\r\n                        <span className=\"badge badge-primary mx-1\">Repos : {this.props.profile?.public_repos}</span>\r\n                        <span className=\"badge badge-warning mx-1\">Gists : {this.props.profile?.public_gists}</span>\r\n                        <span className=\"badge badge-danger mx-1\">Following : {this.props.profile?.following}</span>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <ul className=\"list-group\">\r\n                            <li className=\"list-group-item\">\r\n                                NAME : {this.props.profile?.name}\r\n                            </li>\r\n                            <li className=\"list-group-item\">\r\n                                Location : {this.props.profile?.location}\r\n                            </li>\r\n                            <li className=\"list-group-item\">\r\n                                Email : {this.props.profile?.email}\r\n                            </li>\r\n                            <li className=\"list-group-item\">\r\n                                Company : <a href={this.props.profile?.company} target=\"_blank\">{this.props.profile?.company}</a>\r\n                            </li>\r\n                            <li className=\"list-group-item\">\r\n                                Blog : <a href={this.props.profile?.blog} target=\"_blank\">{this.props.profile?.blog}</a>\r\n                            </li>\r\n                            <li className=\"list-group-item\">\r\n                                Member Since : {this.props.profile?.created_at}\r\n                            </li>\r\n                            <li className=\"list-group-item\">\r\n                                Profile URL : <a href={this.props.profile?.html_url} target=\"_blank\">{this.props.profile?.html_url}</a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default GithubProfileDetails;\r\n","import React from \"react\";\r\nimport GithubProfileCard from \"./GithubProfileCard\";\r\nimport GithubProfileDetails from \"./GithubProfileDetails\";\r\n\r\nclass GithubProfile extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"row mt-3\">\r\n                    <div className=\"col-md-3\">\r\n                        {\r\n                            Object.keys(this.props).length !== 0 ?\r\n                                <React.Fragment>\r\n                                    <GithubProfileCard profile={this.props.profile}/>\r\n                                </React.Fragment> : null\r\n                        }\r\n                    </div>\r\n                    <div className=\"col-md-9\">\r\n                        {\r\n                            Object.keys(this.props).length !== 0 ?\r\n                                <React.Fragment>\r\n                                    <GithubProfileDetails profile={this.props.profile}/>\r\n                                </React.Fragment> : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default GithubProfile;\r\n","import React from \"react\";\r\n\r\nclass GithubRepos extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n  }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n               <div className=\"card mt-3\">\r\n                   <div className=\"card-header\">\r\n                       <p className=\"h4\">Your Repositories</p>\r\n                   </div>\r\n                   <div className=\"card-body\">\r\n                       <ul className=\"list-group\">\r\n                           {\r\n                               this.props.repos.map((repo) => {\r\n                                   return(\r\n                                       <li className=\"list-group-item d-flex justify-content-around\">\r\n                                            <p className=\"h5\">\r\n                                                <a href={repo.html_url} target=\"_blank\">{repo.name}</a>\r\n                                            </p>\r\n                                           <span className=\"badge badge-success\">{repo.stargazers_count} Stars</span>\r\n                                           <span className=\"badge badge-primary\">{repo.watchers_count} Watches</span>\r\n                                       </li>\r\n                                   )\r\n                               })\r\n                           }\r\n                       </ul>\r\n                   </div>\r\n               </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default GithubRepos;\r\n","import React from \"react\";\r\nimport GithubSearch from \"./GithubSearch\";\r\nimport Axios from \"axios\";\r\nimport {clientID, clientSecret} from \"./githubCredentials\";\r\nimport GithubProfile from \"./GithubProfile\";\r\nimport GithubRepos from \"./GithubRepos\";\r\n\r\nclass GithubSearchApp extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n           username : '',\r\n            profile : {},\r\n            repos : [],\r\n            errorMessage : ''\r\n        }\r\n    }\r\n\r\n    pullUserName = (username) => {\r\n        this.setState({\r\n            username : username\r\n        });\r\n        this.searchUserProfile(username);\r\n        this.searchUserRepos(username);\r\n    };\r\n\r\n\r\n    searchUserProfile = (username) => {\r\n        let dataURL = `http://api.github.com/users/${username}?clientId=${clientID}&clientSecret=${clientSecret}`;\r\n        Axios.get(dataURL).then((response) => {\r\n            this.setState({\r\n                profile : response.data\r\n            });\r\n        }).catch((err) => {\r\n            this.setState({\r\n                errorMessage : err\r\n            });\r\n        });\r\n    };\r\n\r\n    searchUserRepos = (username) => {\r\n        let dataURL = `http://api.github.com/users/${username}/repos?clientId=${clientID}&clientSecret=${clientSecret}`;\r\n        Axios.get(dataURL).then((response) => {\r\n            this.setState({\r\n                repos : response.data\r\n            });\r\n        }).catch((err) => {\r\n            this.setState({\r\n                errorMessage : err\r\n            });\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {/*<pre>{JSON.stringify(this.state.repos)}</pre>*/}\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <GithubSearch pushUserName={this.pullUserName}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            {\r\n                                Object.keys(this.state.profile).length !== 0 ?\r\n                                    <React.Fragment>\r\n                                        <GithubProfile profile={this.state.profile}/>\r\n                                    </React.Fragment> : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            {\r\n                                this.state.repos.length > 0 ?\r\n                                    <React.Fragment>\r\n                                        <GithubRepos repos={this.state.repos}/>\r\n                                    </React.Fragment> : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default GithubSearchApp;\r\n","import React from 'react';\nimport './App.css';\nimport GithubSearchApp from \"./components/GithubSearchApp\";\n\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <nav className=\"navbar navbar-dark bg-secondary text-white navbar-expand-sm\">\n                    <a href=\"/\" className='navbar-brand'>Github Profile Search App</a>\n                </nav>\n\n                <GithubSearchApp/>\n            </div>\n        );\n    }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// MDBootstrap css files\nimport './bootstrap/css/font-awesome-5.8.1.css';\nimport 'mdbootstrap/css/bootstrap.css';\nimport 'mdbootstrap/css/mdb.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}